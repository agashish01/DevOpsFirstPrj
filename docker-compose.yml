version: '3.0'
services:
  reactapp-var:
    #build .   is referring to the $pwd for the "Dockerfile". But in case the filename is "Dockerfile.dev" then it will not work. 
    #Hence we specify few more attributes like "context" and "dockerfile".
    #image: img_reactApp
    build:
      #Below specify from where to copy the files from.        
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - /app/node_modules
      - .:/app
    #Make sure you rebuild your containers after making this change. with  docker-compose down && docker-compose up --build   
    #Adding stdin_open: true or tty: true to the docker-compose file works.
    #stdin_open stands for interactive and tty means terminal. If you do a quick google search you find this:
    #Alternative solution is "docker-compose run" instead of "docker-compose up"
    #The first corresponds to -i in docker run and the second to -t.
    stdin_open: true
    #tty: true

    #If you are using any version of Windows and your React app is not automatically reloading after a code change, you can add this environment variable to your compose file:
    #Actually, I found an answer here. Apparently create-react-app uses chokidar to watch file changes, and it has a flag CHOKIDAR_USEPOLLING to use polling to watch for file changes instead. So CHOKIDAR_USEPOLLING=true npm start should fix the problem. As for me, I set CHOKIDAR_USEPOLLING=true in my environment variable for the docker container and just started the container.
    environment:
      - CHOKIDAR_USEPOLLING=true